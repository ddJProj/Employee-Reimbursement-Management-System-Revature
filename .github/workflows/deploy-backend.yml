name: Deploy Backend to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'core/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:  # manual trigger


jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build \
            --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -t employee-reimbursement:latest .
      
      - name: Save Docker image to file
        run: |
          echo "Saving image to tar.gz..."
          docker save employee-reimbursement:latest | gzip > backend-image.tar.gz
          ls -lh backend-image.tar.gz
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # ssh debug steps (resolved through security rule)
      #   run: |
      #       echo "Setting up SSH..."
      #       echo "EC2_HOST: ${{ secrets.EC2_HOST }}"
      #       echo "EC2_USER: ${{ secrets.EC2_USER }}"
      #       
      #       mkdir -p ~/.ssh
      #       
      #       echo "Creating SSH key file..."
      #       echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
      #       
      #       # verify key file
      #       echo "Key file size: $(wc -c < ~/.ssh/id_rsa) bytes"
      #       echo "Key file first line: $(head -n 1 ~/.ssh/id_rsa)"
      #       echo "Key file last line: $(tail -n 1 ~/.ssh/id_rsa)"
      #       
      #       chmod 600 ~/.ssh/id_rsa
      #       
      #       echo "Testing SSH key permissions..."
      #       ls -la ~/.ssh/id_rsa
      #       
      #       echo "Adding EC2 host to known_hosts..."
      #       ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>&1
      #       
      #       echo "SSH setup complete!"
      #       echo "Contents of known_hosts:"
      #       cat ~/.ssh/known_hosts
      #
      #
      # - name: Test SSH Connection
      #   run: |
      #     echo "Testing SSH connection to EC2..."
      #     ssh -v -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
      #       ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful!'" 2>&1 || {
      #       echo "SSH connection failed!"
      #       exit 1
      #     }

      - name: Copy Docker image to EC2
        run: |
          echo "Copying image to EC2..."
          scp -i ~/.ssh/id_rsa backend-image.tar.gz \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
 

        #deploy using mysql
      - name: Deploy on EC2
        run: |
          echo "Deploying on EC2..."
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Stop old container
            echo "Stopping old container..."
            docker stop employee-reimbursement 2>/dev/null || true
            docker rm employee-reimbursement 2>/dev/null || true
            
            # Load new image
            echo "Loading new image..."
            docker load < /tmp/backend-image.tar.gz
            rm /tmp/backend-image.tar.gz
            
            # Start new container with MySQL configuration
            echo "Starting new container..."
            docker run -d \
              --name employee-reimbursement \
              --restart unless-stopped \
              -p 8080:8080 \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e SPRING_DATASOURCE_URL="jdbc:mysql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}" \
              -e SPRING_DATASOURCE_DRIVER="com.mysql.cj.jdbc.Driver" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e SPRING_JPA_DIALECT="org.hibernate.dialect.MySQL8Dialect" \
              -e SPRING_JPA_DDL_AUTO="update" \
              -e SPRING_JPA_SHOW_SQL="false" \
              -e H2_CONSOLE_ENABLED="false" \
              -e LOG_LEVEL="INFO" \
              -e SECURITY_LOG_LEVEL="WARN" \
              employee-reimbursement:latest
            
            # Wait for startup
            echo "Waiting for startup..."
            sleep 15
            
            # Check if running
            if docker ps | grep -q employee-reimbursement; then
              echo "Deployment successful!"
              docker logs employee-reimbursement --tail 20
            else
              echo "Deployment failed!"
              docker logs employee-reimbursement
              exit 1
            fi
          EOF

      # - name: Deploy on EC2
      #   run: |
      #     echo "Deploying on EC2..."
      #     ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
      #       # Stop old container
      #       echo "Stopping old container..."
      #       docker stop employee-reimbursement 2>/dev/null || true
      #       docker rm employee-reimbursement 2>/dev/null || true
      #       
      #       # Load new image
      #       echo "Loading new image..."
      #       docker load < /tmp/backend-image.tar.gz
      #       rm /tmp/backend-image.tar.gz
      #       
      #       # Start new container with environment variables
      #       echo "Starting new container..."
      #       docker run -d \
      #         --name employee-reimbursement \
      #         --restart unless-stopped \
      #         -p 8080:8080 \
      #         -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
      #         -e SPRING_DATASOURCE_URL="jdbc:mysql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}" \
      #         -e SPRING_DATASOURCE_USERNAME="${{ secrets.DB_USERNAME }}" \
      #         -e SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}" \
      #         employee-reimbursement:latest
      #       
      #       # Wait for startup
      #       echo "Waiting for startup..."
      #       sleep 15
      #       
      #       # Check if running
      #       if docker ps | grep -q employee-reimbursement; then
      #         echo "Deployment successful!"
      #         docker logs employee-reimbursement --tail 20
      #       else
      #         echo "Deployment failed!"
      #         docker logs employee-reimbursement
      #         exit 1
      #       fi
      #     EOF
      
      - name: Verify deployment
        run: |
          echo "Verifying backend is responding..."
          sleep 10
          
          # try to reach the backend (any response means it's running)
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            http://${{ secrets.EC2_HOST }}:8080/api/auth/login || echo "000")
          
          if [ "$response" = "200" ] || [ "$response" = "401" ] || [ "$response" = "403" ]; then
            echo "Backend is responding (HTTP $response)"
          else
            echo "Backend returned HTTP $response - check logs"
          fi
      
      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/id_rsa backend-image.tar.gz
      
      - name: Deployment summary
        run: |
          echo "=========================================="
          echo "Backend Deployment Complete!"
          echo "=========================================="
          echo "Backend URL: http://${{ secrets.EC2_HOST }}:8080"
          echo "API Endpoint: http://${{ secrets.EC2_HOST }}:8080/api"
          echo "=========================================="
